// Generated by CoffeeScript 1.8.0
(function() {
  var ConfScheme, Trunk,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ConfScheme = require('./ConfScheme');

  Trunk = (function(_super) {
    __extends(Trunk, _super);

    function Trunk(asterisk, obj) {
      this.asterisk = asterisk;
      Trunk.__super__.constructor.call(this, obj);
    }

    Trunk.prototype.save = function(callback) {
      this.appendContextForTrunk();
      return this.appendObjectToUsersConf(callback);
    };

    Trunk.prototype.appendObjectToUsersConf = function(callback) {
      var users_conf;
      users_conf = this.asterisk.conffiles['users.conf'];
      users_conf[this.attributes.name] = this.attributes;
      return this.asterisk.saveConfFile('users.conf', callback);
    };

    Trunk.prototype.appendContextForTrunk = function() {
      var App, D, context, extensions_conf;
      extensions_conf = this.asterisk.conffiles['extensions.conf'];
      D = this.asterisk.dialplan;
      App = D.Application;
      this.attributes['context'] = 'trunk-' + this.attributes.name;
      context = new D.Context(this.attributes['context']);
      console.log('extensions_conf', extensions_conf);
      context.append([new D.Extension('s').append(App.Dial('SIP/gate')), new D.Include('international_calls')]);
      extensions_conf[this.attributes.context] = context.makeObject();
      return this.asterisk.saveConfFile('extensions.conf', function() {
        return console.log('extensions_conf updated');
      });
    };

    return Trunk;

  })(ConfScheme.UserConf);

  module.exports = Trunk;

}).call(this);
