// Generated by CoffeeScript 1.8.0
(function() {
  var ConfTemplate, UserConf, UsersConfTemplate, user,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ConfTemplate = (function() {
    function ConfTemplate() {
      this.schema = require('./templates/' + this.file);
      this.attributes = {};
      this.create();
    }

    ConfTemplate.prototype.getSection = function(key) {
      if (this.schema.sections[key]) {
        return this.schema.sections[key];
      }
    };

    ConfTemplate.prototype.create = function() {
      var fields, key, _results;
      fields = this.getSection(this.section).fields;
      for (key in fields) {
        if (fields[key].required) {
          this.attributes[key] = fields[key]["default"] || '';
        }
      }
      if (this.obj) {
        _results = [];
        for (key in this.attributes) {
          if (this.obj[key]) {
            _results.push(this.attributes[key] = this.obj[key]);
          } else {
            throw new Error('No required param');
          }
        }
        return _results;
      }
    };

    ConfTemplate.prototype.getGeneral = function() {
      var fields, general, key;
      fields = this.getSection('general').fields;
      general = {};
      for (key in fields) {
        if (fields[key].required) {
          general[key] = fields[key]["default"] || '';
        }
      }
      return general;
    };

    ConfTemplate.prototype.getAttributeFromSection = function(section, key) {
      return this.getSection(section).fields[key];
    };

    ConfTemplate.prototype.set = function(key, value) {
      var attribute;
      attribute = this.getAttributeFromSection(this.section, key);
      if (attribute) {
        if (attribute.available) {
          if (__indexOf.call(attribute.available, value) >= 0) {
            return this.attributes[key] = value;
          } else {
            throw new Error('Not available value');
          }
        } else {
          return this.attributes[key] = value;
        }
      } else {
        throw new Error('This key not in schema');
      }
    };

    ConfTemplate.prototype.get = function(key) {
      return this.attributes[key];
    };

    return ConfTemplate;

  })();

  UsersConfTemplate = (function(_super) {
    __extends(UsersConfTemplate, _super);

    function UsersConfTemplate() {
      this.file = 'users.json';
      UsersConfTemplate.__super__.constructor.apply(this, arguments);
    }

    return UsersConfTemplate;

  })(ConfTemplate);

  UserConf = (function(_super) {
    __extends(UserConf, _super);

    function UserConf(obj) {
      this.section = '__user';
      this.obj = obj;
      UserConf.__super__.constructor.apply(this, arguments);
    }

    return UserConf;

  })(UsersConfTemplate);

  user = new UserConf({
    name: 'Vasya',
    secret: '1234'
  });

  user.set('registersip', 'yes');

  user.set('hasiax', 'yes');

  user.set('fullname', 'Vasya Sokolov');

  console.log(user.getGeneral());

  console.log('user', user);

  console.log('get', user.get('name'));

  console.log('user attributes', user.attributes);

}).call(this);
